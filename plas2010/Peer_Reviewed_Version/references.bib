@inproceedings{stagedif:pldi09,
  author = "R. Chugh and J. Meister and R. Jhala and S. Lerner",
  title = "Staged Information Flow in {\js}",
  booktitle = "ACM SIGPLAN PLDI",
  year = 2009
}

@inproceedings{wrappers:esorics09,
  author = "S. Maffeis and J. C. Mitchell and A. Taly",
  title = "Isolating {\js} with Filters, Rewriting and Wrappers",
  booktitle = "ESORICS",
  year = 2009
}

@inproceedings{language:csf09,
  author = "S. Maffeis and A. Taly",
  title = "Language Based Isolation of Untrusted {\js}",
  booktitle = "IEEE CSF",
  year = 2009
}

@inproceedings{semantics:aplas08,
  author = "S. Maffeis and J. C. Mitchell and A. Taly",
  title = "An Operational Semantics for {\js}",
  booktitle = "APLAS",
  month = "October",
  year = 2008
}

@inproceedings{mmt10,
	author = "S. Maffeis and J. C. Mitchell and A. Taly",
	title = "Object Capabilities and Isolation of Untrusted {Web} Applications",
	booktitle = "IEEE S\&P",
	year = 2010
}

@InProceedings{	reynolds-definitional-notes,
  author	= "John C. Reynolds",
  title		= "Definitional Interpreters for Higher-Order Programming Languages",
  pages		= "717--740",
  crossref	= "acm1972",
  note		= "Reprinted as \cite{reynolds-definitional}",
  volume	= 2,
  abstract	= "Higher-order programming languages (i.e., languages in which procedures or labels can occur as values) are usually defined by interpreters which are themselves written in a programming language based on the lambda
		  calculus (i.e., an applicative language such as pure LISP). Examples include McCarthy's definition of LISP, Landin's SECD machine, the Vienna definition of PL/I, Reynolds' definitions of GEDANKEN, and recent unpublished
		  work by L. Morris and C. Wadsworth. Such definitions can be classified according to whether the interpreter contains higher-order functions, and whether the order of application (i.e., call-by-value versus call-by-name) in
		  the defined language depends upon the order of application in the defining language. As an example, we consider the definition of a simple applicative programming language by means of an interpreter written in a similar
		  language. Definitions in each of the above classifications are derived from one another by informal but constructive methods. The treatment of imperative features such as jumps and assignment is also discussed."
}

@Article{	reynolds-definitional,
  author	= "John C. Reynolds",
  title		= "Definitional Interpreters for Higher-Order Programming Languages",
  journal	= "Higher-Order and Symbolic Computation",
  year		= 1998,
  volume	= 11,
  number	= 4,
  pages		= "363--397",
  url		= "http://www.brics.dk/~hosc/local/HOSC-11-4-pp363-397.pdf ftp://ftp.cs.cmu.edu/user/jcr/defint.ps.gz",
  abstract	= "Higher-order programming languages (i.e., languages in which procedures or labels can occur as values) are usually defined by interpreters that are themselves written in a programming language based on the lambda calculus
		  (i.e., an applicative language such as pure LISP). Examples include McCarthy's definition of LISP, Landin's SECD machine, the Vienna definition of PL/I, Reynolds' definitions of GEDANKEN, and recent unpublished work by L.
		  Morris and C. Wadsworth. Such definitions can be classified according to whether the interpreter contains higher-order functions, and whether the order of application (i.e., call by value versus call by name) in the
		  defined language depends upon the order of application in the defining language. As an example, we consider the definition of a simple applicative programming language by means of an interpreter written in a similar
		  language. Definitions in each of the above classifications are derived from one another by informal but constructive methods. The treatment of imperative features such as jumps and assignment is also discussed.",
  keywords	= "programming language, language definition, interpreter, lambda calculus, applicative language, higher-order function, closure, order of application, continuation, LISP, GEDANKEN, PAL, SECD machine, J-operator, reference"
}

@Article{	plotkin-call,
  author	= "Gordon D. Plotkin",
  title		= "Call-by-Name, Call-by-Value and the $\lambda$-Calculus",
  journal	= "Theor. Comp. Sci.",
  year		= 1975,
  volume	= 1,
  number	= 2,
  pages		= "125--159",
  url		= "http://homepages.inf.ed.ac.uk/gdp/publications/cbn_cbv_lambda.pdf"
}

@InProceedings{	gasbichler-final,
  author	= "Martin Gasbichler and Michael Sperber",
  title		= "Final Shift for Call/cc: Direct Implementation of Shift and Reset",
  pages		= "271--282",
  crossref	= "icfp2002",
  url		= "http://www-pu.informatik.uni-tuebingen.de/users/sperber/papers/shift-reset-direct.ps.gz http://www-pu.informatik.uni-tuebingen.de/users/sperber/papers/shift-reset-direct.pdf",
  abstract	= "We present a direct implementation of the shift and reset control operators in the Scheme 48 system. The new implementation improves upon the traditional technique of simulating shift and reset via call/cc. Typical
		  applications of these operators exhibit space savings and a significant overall performance gain. Our technique is based upon the popular incremental stack/heap strategy for representing continuations. We present
		  implementation details as well as some benchmark measurements for typical applications."
}

@InProceedings{	kiselyov-delimited,
  author	= {O. Kiselyov and Shan, C-C. and A. Sabry},
  title		= "Delimited Dynamic Binding",
  pages		= "26--37",
  crossref	= "icfp2006",
  url		= "http://www.cs.rutgers.edu/~ccshan/dynscope/"
}

@Proceedings{	icfp2002,
  key		= "{\relax ICFP}",
  title		= "ICFP",
  booktitle	= "ICFP",
  address	= pub_acm_addr,
  publisher	= pub_acm,
  year		= 2002,
  location	= "Pittsburgh, PA"
}

@Proceedings{	icfp2006,
  key		= "{\relax ICFP}",
  title		= "ICFP",
  booktitle	= "ICFP",
  address	= pub_acm_addr,
  publisher	= pub_acm,
  year		= 2006,
  location	= "Portland, OR"
}

@booktitle{mashupos,
 author = {Wang, H. J. and Fan, X. and Howell, J. and Jackson, C.},
 title = {Protection and communication abstractions for web browsers in
{MashupOS}},
 booktitle = {ACM SOSP},
 year = {2007},
 }


@inproceedings{porter:operating:sosp:2009,
  author	= {Porter, D. E. and Hofmann, O. S. and Rossbach, C. J. and Benn, A. and Witchel, E.},
  title		= {Operating Systems Transactions},
  booktitle	= {ACM SOSP},
  year		= {2009},
}

@InProceedings{Seltzer:osdi96,
  author = "M. I. Seltzer and Y. Endo and C. Small and K. A. Smith",
  title = "Dealing With Disaster: Surviving Misbehaved Kernel Extensions",
  booktitle = "OSDI",
  year = 1996,
}

@inproceedings{	conscript,
  author	= "L. Meyerovich and B. Livshits",
  title		= "ConScript: {Specifying} and Enforcing Fine-Grained Security
Policies for \js\ in the Browser",
  booktitle	= "IEEE S\&P",
  year		= 2010,
}

@article{	fbjs,
  author	= "Facebook",
  title		= "{FBJS} - {Facebook} DeveloperWiki",
  year		= 2007,
}

@Article{	caja,
  author	= "M. S. Miller and M. Samuel and B. Laurie and I. Awad and M. Stay",
  title		= "Caja: {Safe} active content in sanitized \js",
	note = "Manuscript",
  year		= 2008,
}

@Article{	caja_review,
  author	= "Google",
  title		= "Caja External Security Review",
	note = "Manuscript",
  year		= 2009,
}

@Article{	adsafe,
  author	= "D. Crockford",
  title		= "{ADsafe} - {Making} \js\ Safe for Advertising",
  note		= "\url{http://adsafe.org}"
}

@misc{	mootools,
  title	= "MooTools--a compact \js\ framework",
  note		= "\url{http://mootools.net}",
}

@misc{	dom,
  title	= "Document Object Model",
  note		= "\url{http://www.w3.org/DOM}",
}

@article{browsershield,
 author = {Reis, C. and Dunagan, J. and Wang, H. J. and Dubrovsky, O. and Esmeir, S.},
 title = {BrowserShield: Vulnerability-driven filtering of dynamic HTML},
 journal = {ACM Trans. Web},
 volume = {1},
 number = {3},
 year = {2007},
 issn = {1559-1131},
 pages = {11},
 publisher = {ACM},
 address = {New York, NY, USA},
 }

@inproceedings{provos_hotbots2007,
 author = {Provos, N. and McNamee, D. and Mavrommatis, P. and Wang, K. and Modadugu, N.},
 title = {The ghost in the browser analysis of web-based malware},
 booktitle = {First HotBots workshop},
 year = {2007},
 }

@PhDThesis{	felleisen-calculi,
  author	= "M. Felleisen",
  title		= "The Calculi of $\lambda_v$-{CS} Conversion: A Syntactic Theory of Control and State in Imperative Higher-Order Programming Languages",
  school	= "Comp. Sci. Dept., Indiana Univ.",
  year		= 1987,
}

@INPROCEEDINGS{one-wayisolation,
    author = {W. Sun and Z. Liang and R. Sekar and V. N. Venkatakrishnan},
    title = {One-way Isolation: An Effective Approach for Realizing Safe Execution Environments},
    booktitle = {NDSS},
    year = {2005},
}

@inproceedings{nttdocomo,
	title = "\js\ instrumentation for browser security",
	author = "D. Yu and A. Chander and N. Islam and I. Serikov",
	booktitle = "ACM POPL",
	year = 2007
}

@inproceedings{phung,
	title = "Lightweight Self-Protecting \js",
	author = "P. Phung and D. Sands and A. Chudnov",
	booktitle = "ASIACCS",
	year = 2009
}

@inproceedings{tmi-ccs08,
	author = "A. Birgisson and M. Dhawan and U. Erlingsson and V. Ganapathy and
	L. Iftode",
	title = "Enforcing Authorization Policies using Transactional Memory
	Introspection",
	booktitle = "ACM CCS",
	year = 2008
}
